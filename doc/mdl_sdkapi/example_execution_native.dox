/******************************************************************************
 * Copyright (c) 2017-2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/

/*! \page mi_neuray_example_execution_native Example for Execution of Compiled MDL Materials (CPU)

<div align="right">
    [\link mi_neuray_example_compilation Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_execution_ptx Next\endlink]
</div>

This example shows how a renderer can call the code generated by the "native" backend for
compiled materials to evaluate sub-expressions of multiple materials on the CPU.

\section example_execution_native_new New Topics

  - MDL material state (CPU)
  - Execution of generated code (CPU)

\section example_execution_native_descr Detailed Description

<dl>
<dt><b>MDL material state (CPU)</b></dt>
<dd><br>
The MDL material state structure #mi::neuraylib::Shading_state_material is a representation
of the renderer state as defined in section 19 "Renderer state" in the MDL
specification. It is used to make the state of the renderer (like the position of an
intersection point on the surface, the shading normal and the texture coordinates)
available to the generated code.

Here's the material state structure just for reference:

\code
    struct Shading_state_material {
        Float32_3_struct           normal;              // state::normal() result
        Float32_3_struct           geom_normal;         // state::geom_normal() result
        Float32_3_struct           position;            // state::position() result
        Float32                    animation_time;      // state::animation_time() result
        const Float32_3_struct    *text_coords;         // state::texture_coordinate() table
        const Float32_3_struct    *tangent_u;           // state::texture_tangent_u() table
        const Float32_3_struct    *tangent_v;           // state::texture_tangent_v() table
        Float32_4_struct          *text_results;        // texture results lookup table
        const char                *ro_data_segment;     // read-only data segment
        const Float32_4_struct    *world_to_object;     // world-to-object transform matrix
        const Float32_4_struct    *object_to_world;     // object-to-world transform matrix
        Sint32                     object_id;           // state::object_id() result
    };
\endcode

Please refer to the structure documentation for more information.

In this example, we fill the material state structure with some example values and only use
one texture space.
For the world-to-object and object-to-world transformation matrices we use identity matrices.
We will iterate the \c position and \c text_coords fields over a 2x2 quad around the
center of the world with position \c x and \c y coordinates ranging from -1 to 1 and the
texture uv-coordinates ranging from 0 to 1, respectively.
</dd>

<dt><b>Execution of generated code (CPU)</b></dt>
<dd><br>
For the native (CPU) backend, filling this structure is actually already enough to
prepare the execution of the generated code. Calling #mi::neuraylib::ITarget_code::execute()
with the material state and a sufficiently large result buffer will fill the buffer
with the requested result.
In this example, we will provide a \c NULL pointer as a target argument block as we use instance compilation.
See \ref mi_neuray_compilation_modes for more details about compilation modes.

When the \c nv_freeimage plugin has been loaded via
#mi::neuraylib::IMdl_compiler::load_plugin_library() before starting the MDL SDK, even
texture access within the MDL code will work automatically for many common image formats.
PTEX textures are not supported, yet.

In this example, we bake a sub-expression of a material into a texture by executing
the generated code for every texel updating the material state accordingly.
At the end, we write the texture to disk.
</dd>

\section example_execution_native Example Source

<b>Source Code Location:</b>
  <tt>examples/mdl_sdk/execution_native/example_execution_native.cpp</tt>

\include execution_native/example_execution_native.cpp

<div align="right">
    [\link mi_neuray_example_compilation Previous\endlink]
    [\link mi_neuray_examples Up\endlink]
    [\link mi_neuray_example_execution_ptx Next\endlink]
</div>

*/
